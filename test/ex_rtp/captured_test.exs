defmodule ExRTP.CapturedTest do
  use ExUnit.Case, async: true
  # this module contains tests based
  # on real-world captured packets
  # expected values based on Wiresharks's dissection

  alias ExRTP.Packet
  alias ExRTP.Packet.Extension

  test "captured packet 1" do
    bin =
      <<0x90, 0xE2, 0x3D, 0x8C, 0x23, 0x2D, 0xBB, 0x54, 0x60, 0xFF, 0x36, 0x92, 0x10, 0x00, 0x00,
        0x05, 0x02, 0x03, 0x7F, 0x77, 0x0B, 0x03, 0x02, 0x00, 0x2C, 0x0F, 0x08, 0xC2, 0x00, 0x03,
        0x1A, 0x20, 0x10, 0x00, 0x00, 0x00, 0xEA, 0xFF, 0xBE, 0xAB, 0xF3, 0x54, 0x9F, 0x5F, 0x33,
        0xAA, 0x6D, 0x37, 0x2B, 0x1E, 0x2D, 0x13, 0xAB, 0x09, 0x26, 0xDC, 0x8B, 0xB0, 0xE5, 0xDA,
        0x87, 0x2D, 0x18, 0xC6, 0xFD, 0xE9, 0xBF, 0x2B, 0x31, 0xF9, 0x4A, 0xAD, 0xAE, 0x55, 0x1E,
        0x46, 0x5E, 0x02, 0x6A, 0xC4, 0x29, 0x8F, 0xF9, 0x63, 0x19, 0x3F, 0x18>>

    payload =
      <<0xEA, 0xFF, 0xBE, 0xAB, 0xF3, 0x54, 0x9F, 0x5F, 0x33, 0xAA, 0x6D, 0x37, 0x2B, 0x1E, 0x2D,
        0x13, 0xAB, 0x09, 0x26, 0xDC, 0x8B, 0xB0, 0xE5, 0xDA, 0x87, 0x2D, 0x18, 0xC6, 0xFD, 0xE9,
        0xBF, 0x2B, 0x31, 0xF9, 0x4A, 0xAD, 0xAE, 0x55, 0x1E, 0x46, 0x5E, 0x02, 0x6A, 0xC4, 0x29,
        0x8F, 0xF9, 0x63, 0x19, 0x3F, 0x18>>

    {:ok, packet} = Packet.decode(bin)

    assert %Packet{
             version: 2,
             padding: false,
             extension: true,
             marker: true,
             payload_type: 98,
             sequence_number: 15_756,
             timestamp: 590_199_636,
             ssrc: 0x60FF3692,
             csrc: [],
             extension_profile: 0x1000,
             extensions: extensions,
             payload: ^payload,
             padding_size: 0
           } = packet

    expected_extensions = [
      %Extension{id: 2, data: <<0x7F, 0x77, 0x0B>>},
      %Extension{id: 3, data: <<0x00, 0x2C>>},
      %Extension{id: 15, data: <<0xC2, 0x00, 0x03, 0x1A, 0x20, 0x10, 0x00, 0x00>>}
    ]

    sorter = fn a, b -> a.id >= b.id end
    assert Enum.sort(extensions, sorter) == Enum.sort(expected_extensions, sorter)
  end

  test "captured packet 2" do
    bin =
      <<0x90, 0x6F, 0x42, 0x0B, 0xD2, 0x14, 0xB8, 0xBA, 0x37, 0xB8, 0x30, 0x7F, 0xBE, 0xDE, 0x00,
        0x03, 0x22, 0x7F, 0xB8, 0xF6, 0x31, 0x00, 0x33, 0x10, 0xB3, 0x00, 0x00, 0x00, 0x39, 0x76,
        0xC0, 0x75, 0x2C, 0x0A, 0xB9, 0xD6, 0x37, 0x1C, 0x75, 0x43, 0x4D, 0xC4, 0xA3, 0x14, 0xB5,
        0xEE, 0x77, 0x62, 0x6D, 0x89, 0xA8, 0x57, 0x1A, 0xD1, 0xB9, 0x28, 0x63, 0x04, 0xFD, 0x6C,
        0x75, 0x7B, 0x05, 0x4F, 0xEF, 0xF6, 0x36, 0x69, 0x81, 0x2C, 0x38, 0xE0, 0xE5, 0x5D, 0x6B,
        0x33, 0xCB, 0xF1, 0xEE, 0x55, 0xDA, 0xCD, 0x8A, 0xF1, 0x71, 0x25, 0x9C, 0xCB, 0x47, 0x0B,
        0xB1, 0x95, 0xD4, 0x64, 0xB2, 0xD5, 0x4F, 0x43, 0xA4, 0xCF, 0xDA, 0x7C, 0xE1, 0x54, 0x22,
        0x9D, 0xB8, 0xF0, 0x20, 0xBB, 0x65, 0x35, 0x11, 0x8E, 0x6B, 0xE8>>

    payload =
      <<0x39, 0x76, 0xC0, 0x75, 0x2C, 0x0A, 0xB9, 0xD6, 0x37, 0x1C, 0x75, 0x43, 0x4D, 0xC4, 0xA3,
        0x14, 0xB5, 0xEE, 0x77, 0x62, 0x6D, 0x89, 0xA8, 0x57, 0x1A, 0xD1, 0xB9, 0x28, 0x63, 0x04,
        0xFD, 0x6C, 0x75, 0x7B, 0x05, 0x4F, 0xEF, 0xF6, 0x36, 0x69, 0x81, 0x2C, 0x38, 0xE0, 0xE5,
        0x5D, 0x6B, 0x33, 0xCB, 0xF1, 0xEE, 0x55, 0xDA, 0xCD, 0x8A, 0xF1, 0x71, 0x25, 0x9C, 0xCB,
        0x47, 0x0B, 0xB1, 0x95, 0xD4, 0x64, 0xB2, 0xD5, 0x4F, 0x43, 0xA4, 0xCF, 0xDA, 0x7C, 0xE1,
        0x54, 0x22, 0x9D, 0xB8, 0xF0, 0x20, 0xBB, 0x65, 0x35, 0x11, 0x8E, 0x6B, 0xE8>>

    {:ok, packet} = Packet.decode(bin)

    assert %Packet{
             version: 2,
             padding: false,
             extension: true,
             marker: false,
             payload_type: 111,
             sequence_number: 16_907,
             timestamp: 3_524_573_370,
             ssrc: 0x37B8307F,
             csrc: [],
             extension_profile: 0xBEDE,
             extensions: extensions,
             payload: ^payload,
             padding_size: 0
           } = packet

    expected_extensions = [
      %Extension{id: 2, data: <<0x7F, 0xB8, 0xF6>>},
      %Extension{id: 3, data: <<0x00, 0x33>>},
      %Extension{id: 1, data: <<0xB3>>}
    ]

    sorter = fn a, b -> a.id >= b.id end
    assert Enum.sort(extensions, sorter) == Enum.sort(expected_extensions, sorter)
  end
end
